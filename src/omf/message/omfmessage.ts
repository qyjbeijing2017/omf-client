// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OMFMessagePayload, unionToOmfmessagePayload, unionListToOmfmessagePayload } from '../../omf/message/omfmessage-payload.js';


export class OMFMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):OMFMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOMFMessage(bb:flatbuffers.ByteBuffer, obj?:OMFMessage):OMFMessage {
  return (obj || new OMFMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOMFMessage(bb:flatbuffers.ByteBuffer, obj?:OMFMessage):OMFMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new OMFMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

payloadType():OMFMessagePayload {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : OMFMessagePayload.NONE;
}

payload<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startOMFMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(0, timestamp, BigInt('0'));
}

static addPayloadType(builder:flatbuffers.Builder, payloadType:OMFMessagePayload) {
  builder.addFieldInt8(1, payloadType, OMFMessagePayload.NONE);
}

static addPayload(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, payloadOffset, 0);
}

static endOMFMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOMFMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedOMFMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createOMFMessage(builder:flatbuffers.Builder, timestamp:bigint, payloadType:OMFMessagePayload, payloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  OMFMessage.startOMFMessage(builder);
  OMFMessage.addTimestamp(builder, timestamp);
  OMFMessage.addPayloadType(builder, payloadType);
  OMFMessage.addPayload(builder, payloadOffset);
  return OMFMessage.endOMFMessage(builder);
}
}
